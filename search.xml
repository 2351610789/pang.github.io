<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>详解Arcgis js-SketchViewModel对象</title>
      <link href="/2024/12/27/arcgis-viewModel%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/12/27/arcgis-viewModel%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><code>sketch.viewModel</code> 是 ArcGIS JS API 中的一个核心对象，负责处理地图上的绘制、编辑、删除和取消等操作。它为用户提供了创建、更新和删除图形的功能，并能够处理用户与地图的交互，特别是在地图上绘制点、线、面等图形时。</p><p><code>SketchViewModel</code>（通常通过 <code>sketch.viewModel</code> 实例化）是一个视图模型类，用于管理用户在地图上进行的绘制操作，提供了高度抽象的 API，能够简化用户绘制和编辑图形的过程。</p><h1 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h1><ul><li><strong>绘制图形</strong>：允许用户绘制各种图形（如点、线、多边形、矩形等）。</li><li><strong>编辑图形</strong>：可以让用户修改已绘制的图形。</li><li><strong>删除图形</strong>：支持删除地图上的图形。</li><li><strong>取消操作</strong>：允许用户取消当前绘制或编辑的操作。</li></ul><h1 id="主要属性和方法"><a href="#主要属性和方法" class="headerlink" title="主要属性和方法"></a>主要属性和方法</h1><h4 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a><strong>基本属性</strong></h4><ul><li>**<code>view</code>**：必需的属性，指定 <code>SketchViewModel</code> 所关联的地图视图（<code>MapView</code> 或 <code>SceneView</code>）。</li><li>**<code>layer</code>**：指定 <code>SketchViewModel</code> 使用的图层，通常是 <code>GraphicsLayer</code>，用于保存绘制的图形。</li><li>**<code>create</code>**：定义当前绘制的图形类型（例如，点、线、多边形等）。</li><li>**<code>update</code>**：用于编辑已绘制的图形。</li></ul><h4 id="2-主要方法"><a href="#2-主要方法" class="headerlink" title="2. 主要方法"></a>2. <strong>主要方法</strong></h4><ul><li>**<code>create(geometryType, options)</code>**：开始一个新的绘制操作，<code>geometryType</code> 参数可以是 <code>&#39;point&#39;</code>、<code>&#39;polyline&#39;</code>、<code>&#39;polygon&#39;</code>、<code>&#39;rectangle&#39;</code> 等，<code>options</code> 可用于设置绘制时的一些自定义选项。</li><li>**<code>update(graphic, updateOptions)</code>**：开始编辑一个已有的图形，<code>graphic</code> 是要编辑的图形，<code>updateOptions</code> 用于设置更新操作的选项。</li><li>**<code>cancel()</code>**：取消当前的绘制或编辑操作。</li><li>**<code>complete()</code>**：完成当前的绘制或编辑操作。</li></ul><h4 id="3-常见事件"><a href="#3-常见事件" class="headerlink" title="3. 常见事件"></a>3. <strong>常见事件</strong></h4><ul><li>**<code>create</code>**：当用户创建一个新图形时触发。</li><li>**<code>update</code>**：当用户编辑图形时触发。</li><li>**<code>delete</code>**：当用户删除图形时触发。</li><li>**<code>cancel</code>**：当用户取消当前操作时触发。</li></ul><h1 id="各个事件中的event对象"><a href="#各个事件中的event对象" class="headerlink" title="各个事件中的event对象"></a>各个事件中的event对象</h1><p>在 ArcGIS JS API 中，<code>SketchViewModel</code> 提供了多个事件，分别用于监听用户的图形创建、更新、删除等操作。这些事件触发时，都会传递一个 <code>event</code> 对象，该对象包含了与事件相关的各种信息，比如图形对象、事件的状态、所使用的工具类型等。理解 <code>event</code> 对象的结构对于正确地处理事件和实现交互逻辑至关重要。</p><p>以下是 <code>create</code>、<code>update</code> 和 <code>delete</code> 事件中的 <code>event</code> 对象的详细说明：</p><h3 id="create事件中的event对象"><a href="#create事件中的event对象" class="headerlink" title="create事件中的event对象"></a>create事件中的event对象</h3><p><code>create</code> 事件在用户绘制图形（如点、线、多边形等）时触发。<code>event</code> 对象包含关于新创建图形的详细信息。</p><h4 id="event-对象的常见属性："><a href="#event-对象的常见属性：" class="headerlink" title="event 对象的常见属性："></a><code>event</code> 对象的常见属性：</h4><ul><li>**<code>state</code>**：描述操作的状态（例如，<code>&quot;complete&quot;</code>、<code>&quot;active&quot;</code>、<code>&quot;cancel&quot;</code>）。<ul><li><code>&quot;complete&quot;</code>：绘制操作完成，图形已经被添加到图层。</li><li><code>&quot;active&quot;</code>：用户正在进行绘制操作，图形还在绘制过程中。</li><li><code>&quot;cancel&quot;</code>：用户取消了当前的绘制操作，图形未被添加到图层。</li></ul></li><li>**<code>tool</code>**：表示当前使用的绘制工具类型（如 <code>&quot;polygon&quot;</code>、<code>&quot;polyline&quot;</code>、<code>&quot;point&quot;</code>、<code>&quot;rectangle&quot;</code> 等）。这帮助区分用户使用的具体工具类型。</li><li>**<code>graphic</code>**：当前操作中创建的图形对象。它是一个 <code>Graphic</code> 实例，包含用户绘制的图形及其属性（如几何形状、符号等）。</li><li>**<code>graphics</code>**（在批量操作中）：如果是批量操作（例如一次性创建多个图形），则此属性包含一个图形对象的数组。</li><li>**<code>toolEventInfo</code>**（可选）：包含有关工具事件的额外信息，通常用于与用户交互的工具类型相关的更多细节。</li><li>**<code>aborted</code>**： 可以用来检查用户是否在图形创建过程中取消了操作（例如，用户按 <code>Esc</code> 键或者点击取消按钮）。</li></ul><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sketchViewModel.<span class="title function_">on</span>(<span class="string">&quot;create&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">state</span> === <span class="string">&quot;complete&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;图形创建完成：&quot;</span>, event.<span class="property">graphic</span>);  <span class="comment">// 输出创建的图形</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;使用的绘制工具：&quot;</span>, event.<span class="property">tool</span>);  <span class="comment">// 输出使用的绘制工具类型</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="update事件中的event对象"><a href="#update事件中的event对象" class="headerlink" title="update事件中的event对象"></a>update事件中的event对象</h3><p><code>update</code> 事件在用户编辑已存在的图形时触发（例如，拖动点、修改线条形状、调整多边形的边界等）。<code>event</code> 对象包含有关更新操作的详细信息。</p><h4 id="event-对象的常见属性：-1"><a href="#event-对象的常见属性：-1" class="headerlink" title="event 对象的常见属性："></a><code>event</code> 对象的常见属性：</h4><ul><li>**<code>state</code>**：描述操作的状态（例如，<code>&quot;complete&quot;</code>、<code>&quot;active&quot;</code>、<code>&quot;cancel&quot;</code>）。<ul><li><code>&quot;complete&quot;</code>：编辑操作完成，图形已经更新。</li><li><code>&quot;active&quot;</code>：用户正在进行图形编辑，操作还未完成。</li><li><code>&quot;cancel&quot;</code>：用户取消了当前的编辑操作，图形没有改变。</li></ul></li><li>**<code>tool</code>**：表示当前使用的编辑工具类型（如 <code>&quot;reshape&quot;</code>、<code>&quot;move&quot;</code> 等）。这有助于区分用户执行的编辑操作是改变形状、移动图形还是其他类型的编辑。</li><li>**<code>graphics</code>**：一个图形对象的数组，包含正在编辑的所有图形。在编辑多个图形的情况下，这个数组会包含所有更新的图形。</li><li>**<code>graphic</code>**：如果只有一个图形正在被编辑，则此属性包含被编辑的图形对象。</li><li>**<code>toolEventInfo</code>**（可选）：与编辑工具事件相关的更多信息（例如，用户拖动的是哪个控制点、编辑的具体细节等）。</li><li>**<code>aborted</code>**：可以用来检查用户是否取消了图形的编辑操作。</li></ul><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sketchViewModel.<span class="title function_">on</span>(<span class="string">&quot;update&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">state</span> === <span class="string">&quot;complete&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;图形更新完成：&quot;</span>, event.<span class="property">graphics</span>);  <span class="comment">// 输出更新后的图形</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;使用的编辑工具：&quot;</span>, event.<span class="property">tool</span>);  <span class="comment">// 输出编辑工具类型</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.<span class="property">state</span> === <span class="string">&quot;active&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;正在编辑图形...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="delete-事件中的event对象"><a href="#delete-事件中的event对象" class="headerlink" title="delete 事件中的event对象"></a>delete 事件中的event对象</h3><p><code>delete</code> 事件在用户删除图形时触发，通常通过删除按钮或者键盘操作触发。<code>event</code> 对象包含删除操作的详细信息。</p><h4 id="event-对象的常见属性：-2"><a href="#event-对象的常见属性：-2" class="headerlink" title="event 对象的常见属性："></a><code>event</code> 对象的常见属性：</h4><ul><li>**<code>graphics</code>**：一个图形对象的数组，包含所有被删除的图形。如果是单个图形被删除，则该数组只包含一个图形对象。</li><li>**<code>graphic</code>**（可选）：如果删除操作只涉及单个图形，则该属性直接引用被删除的图形对象。</li><li>**<code>tool</code>**：表示触发删除操作的工具类型，通常为 <code>delete</code>，用于标识用户是通过删除工具删除的图形。</li><li>**<code>state</code>**：表示删除操作的状态。通常为 <code>&quot;complete&quot;</code>，因为删除操作一旦触发即会立即完成。</li><li>**<code>aborted</code>**：可以用来检查用户是否取消了图形的删除操作。</li></ul><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sketchViewModel.<span class="title function_">on</span>(<span class="string">&quot;delete&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已删除图形：&quot;</span>, event.<span class="property">graphics</span>);  <span class="comment">// 输出删除的图形</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除操作使用的工具：&quot;</span>, event.<span class="property">tool</span>);  <span class="comment">// 输出触发删除操作的工具</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Arcgis js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arcgis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-事件机制</title>
      <link href="/2024/12/25/JS-%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/12/25/JS-%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>JavaScript和html之间的交互是通过事件实现的。事件就是用户或者浏览器自身执行的某种动作。响应某个事件的函数就叫做事件处理函数。</p><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><p>当事件被触发时，浏览器会创建一个事件对象，这个对象包含了与事件相关的信息，比如事件的类型，事件发生的位置等。事件对象会在事件处理函数中作为参数传递。<br>常见的属性</p><ul><li>event.target：事件源，即触发事件的元素。</li><li>event.type：事件类型（例如 “click”, “keydown” 等）。</li><li>event.preventDefault()：阻止事件的默认行为（例如，阻止表单提交、链接跳转等）。</li><li>event.stopPropagation()：阻止事件的冒泡，防止事件传递到父元素。</li></ul><h1 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h1><p><strong>内联绑定：</strong>内联绑定就是在DOM元素中直接绑定事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在HTML中直接绑定点击事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;按钮被点击了！&#x27;)&quot;</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>js绑定：</strong>通过对象.事件的形式给对象绑定事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;myButton&quot;</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myButton&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 通过 JavaScript 绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">   button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">alert</span>(<span class="string">&#x27;按钮被点击了！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">   &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**事件监听器:**通过addEventListener()方法给对象绑定事件，是最推荐的事件绑定方法，它可以为同一个事件绑定多个事件处理程序，并且可通过removeEventListener()方法移除事件处理程序。支持事件的捕获和冒泡机制，更灵活。</p><h1 id="事件回调机制"><a href="#事件回调机制" class="headerlink" title="事件回调机制"></a>事件回调机制</h1><p>事件回调机制是js和浏览器交互的核心，通过addEventListener绑定事件与回调函数，当事件触发时，回调函数会被调用。</p><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>事件冒泡描述了浏览器如何处理针对嵌套元素的事件。事件开始的时候从最深层节点接收，之后沿DOM树逐级向上传播，直至document对象。</p><h2 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h2><p>事件捕获和事件冒泡是相反的，事件捕获是从最顶层节点开始接收事件，然后逐级向下传播，直至最深层节点。</p><p>事件的默认传播顺序是先通过捕获阶段从顶级父元素向下传播，到达目标元素之后通过冒泡阶段向上传播，到达顶级父元素结束。</p><p>可以通过addEventListener()方法的第三个参数来设置事件处理程序的执行时机，true表示捕获阶段，false表示冒泡阶段。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件捕获阶段</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;parent&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获阶段触发&#x27;</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);  <span class="comment">// true 表示捕获阶段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件冒泡阶段</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;parent&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;冒泡阶段触发&#x27;</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);  <span class="comment">// false 表示冒泡阶段</span></span><br></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p><strong>定义：</strong>事件委托也称之为事件代理，是JavaScript中常用绑定事件的常用技巧。顾名思义，“事件代理”即是把原本需要绑定在子元素的响应事件委托给父元素，让父元素担当事件监听的职务。事件代理的原理是DOM元素的事件冒泡。</p><p><strong>原理：</strong>事件委托利用事件冒泡机制来捕获事件，而不是将事件绑定到每个子元素上。比如将一个点击事件绑定到父元素，当子元素被点击时，事件会冒泡到父元素，这时父元素的事件监听器就能捕获这个事件。如果给每个子元素绑定点击事件，当子元素很多时，性能会下降。而事件委托只需要在父元素上绑定一次事件，就可以处理所有子元素的事件，提高了性能。事件委托通常用于为许多相似的元素添加相同的处理，但不仅限于此。例如可以在父容器元素上绑定事件，之后找到event.target，事件发生在指定元素内就处理该事件。</p><p><strong>举例：</strong>一个有9个单元格的table表格，点击任意单元格，都会触发事件，并高亮显示该单元格。（也可以是99个单元格，999个单元格甚至更多）。</p><p><strong>实现：</strong>table添加点击事件并添加监听器，捕获所有的td去除高亮，之后使用event.target给点击的td设置高亮。</p><h2 id="异步回调机制"><a href="#异步回调机制" class="headerlink" title="异步回调机制"></a>异步回调机制</h2><p>js是单线程的编程语言，事件回调机制和异步编程（如setTimeout、Promise、async&#x2F;await）结合紧密。事件回调通常是在事件队列中异步执行的，这意味着他们会在当前执行栈中的代码执行完毕后才会执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;回调函数执行&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结束&#x27;</span>);</span><br></pre></td></tr></table></figure><p>输出顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始</span></span><br><span class="line"><span class="comment">//结束</span></span><br><span class="line"><span class="comment">//回调函数执行</span></span><br></pre></td></tr></table></figure><h3 id="事件回调的执行顺序"><a href="#事件回调的执行顺序" class="headerlink" title="事件回调的执行顺序"></a>事件回调的执行顺序</h3><ol><li>事件触发并将回调函数加入任务队列</li><li>执行当前栈中的同步代码</li><li>同步代码执行完毕，事件队列中的回调函数被放入执行栈中执行。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async与defer的区别</title>
      <link href="/2024/12/25/JS-async%E4%B8%8Edefer/"/>
      <url>/2024/12/25/JS-async%E4%B8%8Edefer/</url>
      
        <content type="html"><![CDATA[<h1 id="1-浏览器的解析和渲染过程"><a href="#1-浏览器的解析和渲染过程" class="headerlink" title="1. 浏览器的解析和渲染过程"></a>1. 浏览器的解析和渲染过程</h1><p>浏览器在加载网页时，会按照以下步骤解析和渲染内容：</p><ul><li><p>HTML解析: 浏览器从顶部开始逐行解析HTML文件，生成DOM树，代表页面的结构。</p></li><li><p>CSS解析: 同时，浏览器会解析CSS文件和内联样式，生成CSSOM树，代表页面的样式。</p></li><li><p>JavaScript执行: 当解析器遇到script标签时，默认会暂停HTML的解析和渲染，去执行脚本中的JavaScript代码。</p></li><li><p>页面渲染: 解析完所有内容并执行完所有脚本后，浏览器根据DOM树和CSSOM树渲染出页面。</p></li></ul><h1 id="2-为什么JavaScript脚本会阻塞解析"><a href="#2-为什么JavaScript脚本会阻塞解析" class="headerlink" title="2.为什么JavaScript脚本会阻塞解析"></a>2.为什么JavaScript脚本会阻塞解析</h1><p>JavaScript脚本可能会操作DOM或者改变页面内容，比如添加或删除元素、改变样式等。为了确保这些操作的正确性，浏览器在遇到script标签时会暂停HTML的解析。这样可以保证：</p><ul><li><p>顺序执行: 浏览器会严格按照脚本在HTML中的顺序来执行JavaScript代码，确保脚本间的依赖关系。</p></li><li><p>页面一致性: 在脚本执行完成之前暂停解析可以防止在HTML文档解析的过程中发生不一致的情况。例如，如果脚本在解析过程中插入新元素，暂停解析可以确保这些新元素被正确处理。</p></li></ul><h1 id="3-async和defer属性"><a href="#3-async和defer属性" class="headerlink" title="3.async和defer属性"></a>3.async和defer属性</h1><p>为了优化页面加载性能，HTML5引入了<code>async</code>和<code>defer</code>属性，用于控制脚本的加载和执行行为。</p><h2 id="async属性"><a href="#async属性" class="headerlink" title="async属性"></a>async属性</h2><ul><li>加载方式: 使用async属性的脚本是异步加载的，这意味着脚本会在后台加载，不会阻塞HTML文档的解析。</li><li>执行时机: 一旦脚本加载完成，浏览器会立即执行它，这可能在HTML文档的解析完成之前。因此，async脚本的执行顺序无法保证，脚本之间也不应有依赖。</li><li>适用场景: 适用于独立的脚本，比如广告、数据统计脚本，这些脚本不依赖于其他内容，也不改变页面结构。</li></ul><h2 id="defer属性"><a href="#defer属性" class="headerlink" title="defer属性"></a>defer属性</h2><ul><li><p>加载方式: 使用defer属性的脚本也是异步加载的，类似于async，它们不会阻塞HTML文档的解析。</p></li><li><p>执行时机: 与async不同，defer脚本会在HTML文档完全解析完毕后按顺序执行。这意味着即使脚本加载完成，它们也会等到文档解析结束才执行。</p></li><li><p>适用场景: 适用于需要确保脚本顺序或依赖于整个文档的脚本。defer脚本通常用于初始化页面的JavaScript代码。</p></li></ul><h1 id="4-async与defer的区别"><a href="#4-async与defer的区别" class="headerlink" title="4.async与defer的区别"></a>4.async与defer的区别</h1><table><thead><tr><th>特性</th><th>async</th><th>defer</th></tr></thead><tbody><tr><td>加载方式</td><td>异步</td><td>异步</td></tr><tr><td>执行时机</td><td>加载完成后立即执行</td><td>HTML解析完成后按顺序执行</td></tr><tr><td>执行顺序</td><td>不保证顺序</td><td>保证顺序</td></tr><tr><td>适用场景</td><td>独立脚本</td><td>依赖脚本或初始化脚本</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
            <tag> defer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/12/18/hello-world/"/>
      <url>/2024/12/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
